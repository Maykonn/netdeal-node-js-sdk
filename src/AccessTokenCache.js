class AccessTokenCache {

  /**
   * CacheConfiguration
   *
   * @param {{method: string, enabled: boolean, server: {host: string, port: number}, accessTokenKey: string, accessTokenKeyTTL: number, supportedMethods: {REDIS: string}}} Configuration
   */
  constructor(Configuration) {
    /**
     * Cache configuration
     *
     * @type {{method: string, enabled: boolean, server: {host: string, port: number}, accessTokenKey: string, accessTokenKeyTTL: number, supportedMethods: {REDIS: string}}}
     * @private
     */
    this._configuration = Configuration;

    /**
     * The cache client instance
     *
     * @type {AbstractRedisCache|AbstractCache}
     * @private
     */
    this._cacheClient = global.NetdealSDKCacheClient; // global, see the NetdealSDK.js file
  }

  /**
   * Stores the token on cache with the configured TTL
   *
   * @param {string} value The token
   */
  async setToken(value) {
    if (this._configuration.enabled) {
      this._token = value;
      const ttl = await this._getTTL();
      await this._cacheClient.setex(this._configuration.accessTokenKey, ttl, value);
    }
  }

  /**
   * @return {string}
   */
  async getToken() {
    return (this._configuration.enabled ? await this._cacheClient.get(this._configuration.accessTokenKey) : '');
  }

  /**
   * Retrieves the token's current TTL
   *
   * The token generated by Netdeal is stored with a TTL of 30 minutes. But, this SDK stores the token
   * on the cache by 29 minutes only (to avoid send invalid tokens to Netdeal and getting 401 responses and
   * saving network resources).
   *
   * @see https://redis.io/commands/ttl
   * @return int
   */
  async _getTTL() {
    let ttl = this._configuration.accessTokenKeyTTL;

    let remainingTTL = await this._cacheClient.ttl(this._configuration.accessTokenKey);

    // if remainingTTL is -1 or -2 will configure the ttl with the default value
    // @see https://redis.io/commands/ttl
    if (remainingTTL > 0) {
      // example: (29min default - 10min elapsed) = a TTL of 19min
      ttl = remainingTTL;
    }

    return ttl;
  }

}

module.exports = AccessTokenCache;
